{"/home/travis/build/npmtest/node-npmtest-elasticsearch-reindex/test.js":"/* istanbul instrument in package npmtest_elasticsearch_reindex */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-elasticsearch-reindex/lib.npmtest_elasticsearch_reindex.js":"/* istanbul instrument in package npmtest_elasticsearch_reindex */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_elasticsearch_reindex = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_elasticsearch_reindex = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-elasticsearch-reindex/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-elasticsearch-reindex && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_elasticsearch_reindex */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_elasticsearch_reindex\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_elasticsearch_reindex.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_elasticsearch_reindex.rollup.js'] =\n            local.assetsDict['/assets.npmtest_elasticsearch_reindex.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_elasticsearch_reindex.__dirname + '/lib.npmtest_elasticsearch_reindex.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-elasticsearch-reindex/node_modules/elasticsearch-reindex/bin/elasticsearch-reindex.js":"#!/usr/bin/env node\n\nvar cli           = require('commander'),\n    elasticsearch = require('elasticsearch'),\n    AgentKeepAlive = require('agentkeepalive'),\n    cluster       = require('cluster'),\n    moment        = require('moment'),\n    _             = require('underscore'),\n    bunyan        = require('bunyan'),\n    ProgressBar   = require('progress'),\n    fs            = require('fs'),\n    Indexer       = require('../lib/indexer');\n\n\ncli\n.version('1.1.11')\n.option('-f, --from [value]', 'source index, eg. http://192.168.1.100:9200/old_index/old_type')\n.option('-t, --to [value]', 'to index, eg. http://192.168.1.100:9200/new_index/new_type')\n.option('-c, --concurrency [value]', 'concurrency for reindex', require('os').cpus().length)\n.option('-b, --bulk [value]', 'bulk size for a thread', 100)\n.option('-q, --query_size [value]', 'query size for scroll', 100)\n.option('-s, --scroll [value]', 'default 1m', '1m')\n.option('-i, --sniff_cluster [value]', 'sniff the rest of the cluster upon initial connection and connection errors', true)\n.option('-o, --request_timeout [value]', 'default 60000', 60000)\n.option('-l, --log_path [value]', 'default ./reindex.log', './reindex.log')\n.option('-n, --max_docs [value]', 'default -1 unlimited', -1)\n.option('--from_ver [value]', 'default 1.5', '1.5')\n.option('--to_ver [value]', 'default 1.5', '1.5')\n.option('-p, --parent [value]', 'if set, uses this field as parent field', '')\n.option('-m, --promise [value]', 'if set indexes expecting promises, default: false', false)\n.option('-z, --compress [value]', 'if set, requests compression of data in transit', false)\n.option('-a, --access_key [value]', 'AWS access key', false)\n.option('-k, --secret_key [value]', 'AWS secret ket', false)\n.option('-e, --region [value]', 'AWS region', false)\n.parse(process.argv);\n\nfor (var key in cli) {\n  if (cli.hasOwnProperty(key)) {\n    if (cli[key] === 'false') {\n      cli[key] = false;\n    } else if (cli[key] === 'true') {\n      cli[key] = true;\n    }\n  }\n}\n\nvar logger = bunyan.createLogger({\n  src: true,\n  name: \"elasticsearch-reindex\",\n  streams: [{\n    path: cli.log_path\n  }]\n});\n\nvar custom_indexer = cli.args[0] ? require(fs.realpathSync(cli.args[0])) : null;\n\nif (cluster.isMaster) {\n  var workers = [];\n  if (custom_indexer && custom_indexer.sharded) {\n    var ranges = [];\n    if (custom_indexer.sharded.ranges) {\n      ranges = custom_indexer.sharded.ranges;\n    } else {\n      var now = moment();\n      if (!custom_indexer.sharded.start) {\n        throw new Error(\"Start time has to be defined in sharded indexer.\")\n      }\n      var start = moment(custom_indexer.sharded.start);\n      var end = custom_indexer.sharded.end ? moment(custom_indexer.sharded.end) : now;\n      if (!start) {\n        throw new Error(\"Start of the range has to be specified for sharded indexer.\");\n      }\n      var current = start;\n      var interval_days = 1;\n      if (custom_indexer.sharded.interval) {\n        switch(custom_indexer.sharded.interval) {\n          case 'month':\n            interval_days = 30;\n            break;\n          case 'week':\n            interval_days = 7;\n            break;\n          default: {\n            var days = parseInt(custom_indexer.sharded.interval);\n            if (days) interval_days = days;\n          }\n        }\n      } else {\n        interval_days = Math.ceil(end.diff(start, 'days') / cli.concurrency);\n      }\n      do {\n        var current_end = current.clone().add(interval_days, 'days');\n        if (current_end > end) {\n          current_end = end;\n        }\n        ranges.push({\n          name: current.format('YYMMDD') + '-' + current_end.format('YYMMDD'),\n          range: {\n            gte: current.format('YYYY-MM-DD'),\n            lt: current_end.format('YYYY-MM-DD')\n          }\n        });\n        current = current_end;\n      } while (current < end);\n    }\n    ranges.forEach(function(shard) {\n      var worker_arg = {range:{}, name: shard.name};\n      worker_arg.range[custom_indexer.sharded.field] = shard.range;\n      workers.push(worker_arg);\n    });\n  } else {\n    workers.push({name: \"single\"})\n  }\n\n  console.log(\"Starting reindex in \" + workers.length + \" shards.\")\n  if (workers.length > 1 & cli.max_docs > -1) console.log(\"Warning: every worker in his range will only index limited documents when max_docs used\");\n  var bar = new ProgressBar(\" reindexing [:bar] :current/:total(:percent) :elapsed :etas - :shards/\"+workers.length+\" working\", {total:0, width:30});\n  var docs = {};\n  workers.forEach(function(args) {\n    var worker = cluster.fork({worker_arg:JSON.stringify(args)});\n    worker.on('message', function(msg) {\n      if (msg.total) {\n        var cnt = Object.keys(docs).length;\n        docs[msg.pid] = msg.total;\n        if (cnt < Object.keys(docs).length) {\n          bar.total = bar.total + msg.total;\n        }\n      }\n      else bar.tick(msg.success, {shards: Object.keys(docs).length});\n    });\n  });\n\n  cluster.on('exit', function(worker, code, signal) {\n    if( signal ) {\n      logger.fatal(\"worker was killed by signal: \"+signal);\n      console.log(\"worker was killed by signal: \"+signal);\n    } else if( code !== 0 ) {\n      logger.fatal(\"worker exited with error code: \"+code);\n      console.log(\"worker exited with error code: \"+code);\n    }\n\n    delete docs[worker.process.pid];\n\n    if (Object.keys(cluster.workers).length === 0) {\n      if (bar.total === bar.curr)\n        console.log('Reindexing completed sucessfully.');\n      else\n        console.log('Failed to reindex ' + (bar.total - bar.curr) + ' (~'+ Math.round((100-(bar.curr/bar.total)*100)*1000)/1000 +'%) documents.');\n    }\n  });\n} else {\n  var worker_arg = null;\n  var range = null;\n  var shard_name = '';\n\n  if (process.env.worker_arg) {\n    worker_arg = JSON.parse(process.env.worker_arg);\n    range = worker_arg.range;\n    shard_name = cluster.worker.id;\n  }\n\n  function createClient(uri, apiVersion) {\n    if (!/\\w+:\\/\\//.test(uri)) {\n      uri = 'http://' + uri;\n    }\n\n    var uri = uri.lastIndexOf('/') === uri.length -1 ? uri.substr(0, uri.length -1) : uri;\n    tokens = uri.split('/');\n    var res = {};\n    if (tokens.length >= 4) {\n      res.type = tokens.pop();\n      res.index = tokens.pop();\n    }\n\n    var config = {\n      requestTimeout: cli.request_timeout,\n      apiVersion: apiVersion,\n      suggestCompression: cli.compress,\n      sniffOnStart: cli.sniff_cluster,\n      sniffOnConnectionFault: cli.sniff_cluster\n    };\n\n    if (cli.access_key && cli.secret_key && cli.region && /\\.amazonaws\\./.test(uri)) {\n      config.connectionClass = require('http-aws-es');\n      config.amazonES = {\n        accessKey: cli.access_key,\n        secretKey: cli.secret_key,\n        region: cli.region\n      };\n    }\n\n    config.host = res.host = tokens.join('/');\n\n    res.client = new elasticsearch.Client({\n        hosts: [tokens[2]],\n        maxRetries: 10,\n        keepAlive: true,\n        maxSockets: 10,\n        minSockets: 10,\n        createNodeAgent: function (connection, config) {\n          return new AgentKeepAlive(connection.makeAgentConfig(config));\n        }\n      }\n    );\n    return res;\n  }\n\n  if (!cli.from || !cli.to) {\n    throw new Error('\"from\" and \"to\" parameters are required');\n  }\n\n  var from = createClient(cli.from, cli.from_ver);\n      to = createClient(cli.to, cli.to_ver),\n      processed_total = 0,\n      processed_failed = 0;\n\n  var scan_options = {\n        index       : from.index,\n        type        : from.type,\n        search_type : 'scan',\n        scroll      : cli.scroll,\n        size        : cli.query_size,\n        body        : {}\n      };\n\n  if (range) {\n    _.defaults(scan_options.body, {query:{range:range}});\n  }\n\n  if (custom_indexer && custom_indexer.query) {\n    scan_options.body = _.extend(scan_options.body, custom_indexer.query);\n  }\n\n  var reindexer = new Indexer();\n\n  reindexer.on('item-failed', function(item) {\n    processed_failed++;\n    logger.warn(item);\n  });\n\n  reindexer.on('error', function(error) {\n    logger.error(error);\n  });\n\n  reindexer.on('batch-complete', function(num_of_success) {\n    process.send({success: num_of_success});\n  });\n\n  from.client.search(scan_options, function scroll_fetch(err, res) {\n    if (err) {\n      if (err.message instanceof Error) {\n        err = err.message;\n      }\n      logger.fatal(err);\n      if (err.message.indexOf('parse') > -1) {\n        throw new Error(\"Scroll body parsing error, query_size param is possibly too high.\");\n      } else {\n        throw new Error(\"Scroll error: \" + err);\n      }\n    }\n    if (!res.hits.total) {\n      logger.info('No documents can be found!');\n      return process.exit();\n    }\n    var total = cli.max_docs === -1 ? res.hits.total : (cli.max_docs > res.hits.total ? res.hits.total : cli.max_docs);\n    total = parseInt(total);\n    process.send({total: total, pid: process.pid});\n    var docs = res.hits.hits,\n      reindexMethod = cli.promise ? 'indexPromise' : 'index';\n\n    processed_total = processed_total + docs.length;\n    if (processed_total > total) {\n      docs = docs.slice(0, total - processed_total);\n      processed_total = total;\n    }\n    reindexer[reindexMethod](docs, {\n      concurrency : cli.concurrency,\n      bulk        : cli.bulk,\n      client      : to.client,\n      indexer     : custom_indexer ? custom_indexer.index : null,\n      index       : to.index,\n      type        : to.type,\n      parent      : cli.parent\n    }, function(err) {\n      if (err) {\n        logger.fatal(err);\n        return console.log(\"\\nReindex error: \" + err);\n      }\n      if (processed_total < total) {\n        from.client.scroll({\n          body : res._scroll_id,\n          scroll : cli.scroll\n        }, scroll_fetch);\n      } else {\n        var msg = \"    \" + shard_name + \" Total \" + processed_total + \" documents have been processed!\";\n        if (processed_failed) {\n          msg +=   \" about \" + processed_failed + \" documents reindex failed, see the \" + cli.log_path;\n        }\n        logger.info(msg);\n        process.exit();\n      }\n    });\n  });\n}\n","/home/travis/build/npmtest/node-npmtest-elasticsearch-reindex/node_modules/elasticsearch-reindex/lib/indexer.js":"/* jshint expr:true */\n\nvar async         = require('async'),\n    _             = require('underscore'),\n    EventEmitter  = require('events').EventEmitter,\n    inherits      = require('util').inherits,\n    Promise       = require('bluebird');\n\nfunction Indexer () {\n  EventEmitter.call(this);\n}\n\nvar _defaultIndexer = function(item, options) {\n  var index = {index:{_index:options.index || item._index, _type:options.type || item._type, _id: item._id}};\n  if(options.parent !== '') {\n    index.index._parent = item._source[options.parent];\n  }\n\n  return [\n    index,\n    item._source\n  ];\n};\n\ninherits(Indexer, EventEmitter);\n\nIndexer.prototype.index = function(docs, options, cb) {\n  if (!docs) {\n    return;\n  }\n  var self = this;\n  options = options || {};\n  options = options || {\n    concurrency:require('os').cpus().length,\n    bulk:100\n  };\n  options.indexer = options.indexer || _defaultIndexer;\n\n  var chunks = _.toArray(_.groupBy(docs, function(item, index){ return Math.floor(index/options.bulk); }));\n  async.eachLimit(chunks, options.concurrency, function(chunk, cb) {\n    var bulk_data = [];\n    chunk.forEach(function(item) {\n      bulk_data = bulk_data.concat(options.indexer(item, options));\n    });\n    options.client.bulk({\n      body: bulk_data\n    }, function(err, res) {\n      if (err) {\n        self.emit('error', err);\n        return cb(err);\n      }\n      if (res.errors) {\n        res.items.forEach(function(item) {\n          if (_.indexOf([200, 201], item.index.status) == -1) {\n            self.emit('item-failed', item);\n          }\n          self.emit('batch-complete', 1);\n        });\n      } else {\n        self.emit('batch-complete', chunk.length);\n      }\n      cb(err);\n    });\n  }, function(err) {\n    cb(err);\n  });\n};\n\nIndexer.prototype.indexPromise = function(docs, options, cb) {\n  if (!docs) {\n    return;\n  }\n\n  var self = this;\n\n  options = options || {};\n  options = options || {\n    concurrency:require('os').cpus().length,\n    bulk:100,\n  };\n\n  options.indexer = options.indexer || _defaultIndexer;\n\n  var chunks = _.toArray(_.groupBy(docs, function(item, index) {\n    return Math.floor(index/options.bulk);\n  }));\n\n  async.eachLimit(chunks, options.concurrency, function(chunk, cb) {\n    // holds whether the promise has finished\n    var sent = false;\n\n    // map each indexer to return a promise\n    return Promise.all(chunk.map(function(item) {\n      return options.indexer(item, options, options.client);\n    })).catch(function (err) {\n      self.emit('error', err);\n      throw cb(sent = err);\n    })\n\n    // Once all of the data resolves index it\n    .then(function (bulk_data) {\n      bulk_data = _.flatten(bulk_data).filter(function(x) { return x; });\n\n      if (!bulk_data.length) {\n        return {};\n      }\n\n      return options.client.bulk({\n        body: bulk_data\n      });\n    }).catch(function (err) {\n      if (sent) throw err;\n\n      self.emit('error', err);\n      throw cb(sent = err);\n    })\n\n    // Indexed via ES successfully\n    .then(function(res) {\n      if (res.errors) {\n        throw res;\n      }\n\n      self.emit('batch-complete', chunk.length);\n      return cb();\n    }).catch(function (err) {\n      if (sent) throw err;\n\n      err && Array.isArray(err.items) && err.items.forEach(function(item) {\n        if (_.indexOf([200, 201], item.index.status) == -1) {\n          self.emit('item-failed', item);\n        }\n        self.emit('batch-complete', 1);\n      });\n\n      cb(sent = err);\n    });\n  }, function(err) {\n    cb(err);\n  });\n};\n\nmodule.exports = Indexer;\n"}